# shellcheck shell=sh disable=SC3043,2164,2046,2155,2106,2086,2002,1091 #source
# . "$(x wsroot)/.x-cmd/table"
pkg(){
    local op="$1";  shift
    case "$op" in
        *)             "pkg_$op" "$@" ;;
    esac
}

pkg_index(){
    local tgtprefix="$(x wsroot)/.tmp"
    mkdir -p "$tgtprefix"
    x cd $(x wsroot)/src
    for dir in *; do
    (
        x cd "$dir" || continue
        for pkg in *; do
            (
                x cd "$pkg" || exit
                if [ ! -f meta.yml ]; then
                    x:warn  "Not Existed: $dir/$pkg/meta.yml"
                    exit
                fi

                version_list="$(___x_cmd_pkg_ls_all "$pkg" 2>/dev/null)"
                # [ -n "$version_list" ] || continue
                {
                    if [ "$(printf "%s" "$version_list" | wc -l)" -gt 10 ] ; then
                        printf "%s" "$version_list" | awk -F'[-.]' '{print $1}' | sort | uniq | while read -r prefix; do
                            printf "  %s:\n" "$prefix"
                            ___x_cmd_pkg_ls_all "$pkg" | grep "$prefix" | while read -r candidate; do
                                printf "    %s:\n      <info>: null\n" "$candidate"
                            done
                        done
                    elif [ -n "$version_list" ] ; then
                        printf "%s" "$version_list" | sort | while read -r version; do
                            printf "  %s:\n    <info>: null\n" "$version"
                        done
                    fi
                } | x y2j >"$tgtprefix/$dir/$pkg/index.json"
                x:info "Generate: $tgtprefix/$dir/$pkg/index.json"
            )
        done
    )
    done
}

pkg_ls()(
    x cd $(x wsroot)/src
    find . -name '*.json'
)

pkg_json2yml()(
    x cd $(x wsroot)/src
    find . -name '*.json' | while read -r line; do
        p=${line%.json}.yml
        cat $line | x yq -o yaml e -P >$p
        # x j2y "$line" "$p"
        rm "$line"
    done
)

pkg_yml2tgz()(
    x cd  $(x wsroot) && x rmrf .tmp

    pkg_yml2json "$@"
    pkg_json2binmod
    # xws table local
    pkg_ins
    pkg_index
    x cd $(x wsroot)/.tmp
    x 7za a "$___X_CMD_PKG_VERSION.7z" *
    # x 7za all.7z *
    x rmrf "../dist/$___X_CMD_PKG_VERSION.7z"
    x mkdirp ../dist
    mv "$___X_CMD_PKG_VERSION.7z" "../dist/$___X_CMD_PKG_VERSION.7z"
    x cd  $(x wsroot) && x rmrf .tmp
)

pkg_yml2json()(
    local state="$1" # whether force
    local tgtprefix="$(x wsroot)/.tmp"
    x mkdirp "$tgtprefix"
    x cd $(x wsroot)/src

    for dir in *; do
        (

            x cd "$dir" || continue
            for pkg in *; do
                (
                    case "$pkg" in
                        *-todo)   continue ;;
                    esac
                    x:info "pkg: $(pwd)/$pkg"
                    x cd "$pkg" || exit
                    if [ ! -f meta.yml ]; then
                        x:warn  "Not Existed: $dir/$pkg/meta.yml"
                        exit
                    fi

                    mkdir -p "$tgtprefix/$dir/$pkg"
                    x yq -o json e -P <meta.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/meta.tt.json"
                    # x y2j meta.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/meta.tt.json"

                    if [ -f version.sh ]; then
                        if [ -z "$state" ]; then
                            x rmrf tmp
                            (
                                . ./version.sh | x ja t "\t"
                            ) > tmp
                        fi
                        cat tmp >"$tgtprefix/$dir/$pkg/version.tt.json"
                    elif [ -f version.yml ]; then
                        x:info "Generate: $tgtprefix/$dir/$pkg/version.tt.json" >&2
                        x yq -o json e -P <version.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/version.tt.json"
                    else
                        x:error "Unexisted version.sh and version.yml: $tgtprefix/$dir/$pkg" >&2
                    fi

                    if [ -d .x-cmd ]; then
                        x:info "Copy .x-cmd to $tgtprefix/$dir/$pkg"
                        cp -r .x-cmd "$tgtprefix/$dir/$pkg"
                    fi
                )
            done
        )
    done

    # find . -name '*.yml' | while read -r line; do
    #     pp="$tgtprefix/$line"
    #     ppd="${pp%/*}"
    #     [ -d "$ppd" ] || mkdir -p "$ppd"
    #     {
    #         cat "$line" | x yq -o json e -P | x ja t "\t"
    #         printf "\n"
    #     } >"${pp%.yml}.tt.json"
    # done
)

pkg_install(){
    pkg_yml2json
    pkg_json2binmod
    pkg_ins
}

pkg_install_local(){
    x uz dist/v0.0.1.7z .tmp && \
    pkg_ins
}

pkg_ins(){
    x rmrf "$___X_CMD_PKG_BASE_PATH/raw"
    mkdir -p "$___X_CMD_ROOT_TMP/pkg"
    x:info "Copy .x-cmd to $___X_CMD_PKG_BASE_PATH/raw"
    cp -rf "$(x wsroot)/.tmp" "$___X_CMD_PKG_BASE_PATH/raw"
}

pkg_json2binmod()(
    # step 1: list all json
    # step 2: get xbin attribute
    x:info "Generate binmod.txt file"
    x cd "$(x wsroot)/.tmp" || return
    find . -name meta.tt.json | while read -r line; do
        # TODO: if it is a value.
        pkg_name="${line%/meta.tt.json}"
        pkg_name="${pkg_name##*/}"
        cat "$line" | x ja -v NAME="$pkg_name" '{
            if (k()=="static-build") {
                _idx = index(v(), "/")
                NAME=substr(v(), _idx+1)
            }
            if ((O[1]=="\"xbin\"") && (v() !~ /^[\{}]$/)) {
                _name = ( D == 1 ) ? NAME : k()
                if(uq[ _name ] == "") {
                    print ":" _name ":" NAME
                    uq[ _name ] = _name
                }

            }
        }
        END{
            if(NAME == "zsh-plugin") print ":"  NAME ":" NAME
        }
        '
    done > binmod.txt
)

___X_CMD_PKG_VERSION=all
[ "$#" -gt 0 ] && pkg "$@"

